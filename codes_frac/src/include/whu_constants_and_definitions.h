#ifndef CONSTANTS_AND_DEFINITIONS
#define CONSTANTS_AND_DEFINITIONS

#include <string>

const double mpsip = 3.686, mka = 0.493677, mpi = 0.139556995;
const double mpsip2 = mpsip * mpsip;
const double fFUD = 0.22 / 3.0;

const bool binding_phi = true;

const int kBlank = -1;
const std::string kBlankParameter = "xxxxxxxxxxxx";
const double kParameterLimit = 1e30;

const double rk = 0.493677;
const double rp = 0.139556995;

enum ParameterCategory {
    // start_category,
    spin_category,
    mass_category,
    mass2_category,
    width_category,
    g1_category,
    g2_category,
    b1_category,
    b2_category,
    b3_category,
    b4_category,
    b5_category,
    rho_category,
    frac_category,
    phi_category,
    propType_category,
    end_category
};

enum DataObjectIndex {
    phipp_data_index,
    phipp_phsp_index,
    phikk_data_index,
    phikk_phsp_index,
    end_data_object_index
};

enum ParameterListIndex { phipp_list_index, phikk_list_index, end_list_index };
enum ParameterType { fixxd, freed, only_uplimit, only_lowlimit, both_limits };

enum ParameterVectorIndex {
    parameter_vector_index_start,
    one_dimensional_start,
    b2qf2xx,
    b4qjvf2,
    b2qjv2,
    b2qjv3,
    b2qbv2,
    b2qbv3,
    b1qjv2,
    b1qjv3,
    b1qbv2,
    b1qbv3,
    b1q2r23,
    sv,
    s23,
    sv2,
    sv3,
    b2qjvf2,
    // 暂不用于后期计算的参数
    arwdarw,
    q2r45,
    b1q2r45,
    qjvf2,
    qf2xx,
    qjv2,
    qjv3,
    qbv2,
    qbv3,
    q2r23,
    one_dimensional_end,
    two_dimensional_start,
    wpf22,
    wpf22_ = wpf22 + 1,
    w1p12_3,
    w1p12_3_ = w1p12_3 + 1,
    w1p13_3,
    w1p13_3_ = w1p13_3 + 1,
    w1p12_4,
    w1p12_4_ = w1p12_4 + 1,
    w1p13_4,
    w1p13_4_ = w1p13_4 + 1,
    w1m12,
    w1m12_ = w1m12 + 1,
    w1m13,
    w1m13_ = w1m13 + 1,
    two_dimensional_end,
    four_dimensional_start,
    wu,
    wu_ = wu + 3,
    w0p22,
    w0p22_ = w0p22 + 3,
    ak23w,
    ak23w_ = ak23w + 3,
    w2p2,
    w2p2_ = w2p2 + 3,
    w2p1,
    w2p1_ = w2p1 + 3,
    w2p3,
    w2p3_ = w2p3 + 3,
    w2p4,
    w2p4_ = w2p4 + 3,
    w2p5,
    w2p5_ = w2p5 + 3,
    w1p12_1,
    w1p12_1_ = w1p12_1 + 3,
    w1p13_1,
    w1p13_1_ = w1p13_1 + 3,
    w1p12_2,
    w1p12_2_ = w1p12_2 + 3,
    w1p13_2,
    w1p13_2_ = w1p13_2 + 3,
    // 暂不用于后期计算的参数
    ak23,
    ak23_ = ak23 + 3,
    ak45,
    ak45_ = ak45 + 3,
    ar,
    ar_ = ar + 3,
    ak23u,
    ak23u_ = ak23u + 3,
    ak45u,
    ak45u_ = ak45u + 3,
    aru,
    aru_ = aru + 3,
    ak12,
    ak12_ = ak12 + 3,
    ak13,
    ak13_ = ak13 + 3,
    akv2m3,
    akv2m3_ = akv2m3 + 3,
    akv3m2,
    akv3m2_ = akv3m2 + 3,
    ak12u,
    ak12u_ = ak12u + 3,
    ak13u,
    ak13u_ = ak13u + 3,
    akv2m3u,
    akv2m3u_ = akv2m3u + 3,
    akv3m2u,
    akv3m2u_ = akv3m2u + 3,
    ak12w,
    ak12w_ = ak12w + 3,
    ak13w,
    ak13w_ = ak13w + 3,
    akv2m3w,
    akv2m3w_ = akv2m3w + 3,
    akv3m2w,
    akv3m2w_ = akv3m2w + 3,
    wt,
    wt_ = wt + 3,
    arw,
    arw_ = arw + 3,
    ak23wu,
    ak23wu_ = ak23wu + 3,
    w1p12_1u,
    w1p12_1u_ = w1p12_1u + 3,
    w1p13_1u,
    w1p13_1u_ = w1p13_1u + 3,
    w1p12_2u,
    w1p12_2u_ = w1p12_2u + 3,
    w1p13_2u,
    w1p13_2u_ = w1p13_2u + 3,
    w2p1u,
    w2p1u_ = w2p1u + 3,
    four_dimensional_end,
    four_four_dimensional_start,
    t2wf,
    t2wf_ = t2wf + 15,
    del23w,
    del23w_ = del23w + 15,
    t2wfu,
    t2wfu_ = t2wfu + 15,
    t2p3,
    t2p3_ = t2p3 + 15,
    delv2w,
    delv2w_ = delv2w + 15,
    delv3w,
    delv3w_ = delv3w + 15,
    del45w,
    del45w_ = del45w + 15,
    t2wvf,
    t2wvf_ = t2wvf + 15,
    t2v2,
    t2v2_ = t2v2 + 15,
    t2v3,
    t2v3_ = t2v3 + 15,
    t2b3,
    t2b3_ = t2b3 + 15,
    t2b2,
    t2b2_ = t2b2 + 15,
    four_four_dimensional_end,
    parameter_vector_index_end
};
#endif


#define threads_per_block 256 
